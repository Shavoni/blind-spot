import { Octokit } from '@octokit/rest';
import { CONFIG } from './config';

class GitHubService {
  private octokit: Octokit | null = null;
  private isInitialized = false;

  async initialize(): Promise<boolean> {
    try {
      if (!CONFIG.github.token) {
        console.warn('‚ö†Ô∏è GitHub token missing');
        return false;
      }

      this.octokit = new Octokit({
        auth: CONFIG.github.token,
      });

      // Test connection
      const { data } = await this.octokit.rest.users.getAuthenticated();
      console.log(`‚úÖ GitHub connected as: ${data.login}`);
      
      this.isInitialized = true;
      return true;
    } catch (error) {
      console.error('‚ùå GitHub connection failed:', error);
      return false;
    }
  }

  async exportAnalysis(analysisData: any): Promise<{ success: boolean; url?: string; error?: string }> {
    if (!this.octokit || !this.isInitialized) {
      return { success: false, error: 'GitHub not initialized' };
    }

    try {
      const fileName = `analysis-${analysisData.sessionId}-${Date.now()}.json`;
      const content = JSON.stringify(analysisData, null, 2);
      const encodedContent = Buffer.from(content).toString('base64');

      const { data } = await this.octokit.rest.repos.createOrUpdateFileContents({
        owner: CONFIG.github.owner,
        repo: CONFIG.github.repo,
        path: `analyses/${fileName}`,
        message: `Add analysis: ${analysisData.sessionId}`,
        content: encodedContent,
      });

      console.log('üì§ Analysis exported to GitHub:', data.content?.html_url);
      return { success: true, url: data.content?.html_url };
    } catch (error) {
      console.error('‚ùå GitHub export failed:', error);
      return { success: false, error: (error as Error).message };
    }
  }

  async createAnalysisReport(analysisData: any): Promise<{ success: boolean; url?: string; error?: string }> {
    if (!this.octokit || !this.isInitialized) {
      return { success: false, error: 'GitHub not initialized' };
    }

    try {
      const reportContent = this.generateMarkdownReport(analysisData);
      const fileName = `report-${analysisData.sessionId}.md`;
      const encodedContent = Buffer.from(reportContent).toString('base64');

      const { data } = await this.octokit.rest.repos.createOrUpdateFileContents({
        owner: CONFIG.github.owner,
        repo: CONFIG.github.repo,
        path: `reports/${fileName}`,
        message: `Add report: ${analysisData.sessionId}`,
        content: encodedContent,
      });

      console.log('üìã Report created on GitHub:', data.content?.html_url);
      return { success: true, url: data.content?.html_url };
    } catch (error) {
      console.error('‚ùå GitHub report creation failed:', error);
      return { success: false, error: (error as Error).message };
    }
  }

  private generateMarkdownReport(analysisData: any): string {
    return `# Blind Spot Analysis Report

## Session Information
- **Session ID**: ${analysisData.sessionId}
- **Timestamp**: ${new Date(analysisData.timestamp).toISOString()}
- **Context**: ${analysisData.contextPreset || 'General'}
- **Overall Trust Vector**: ${Math.round(analysisData.trustVector * 100)}%

## Signal Analysis

### Facial Signals
- **Confidence**: ${Math.round(analysisData.signals.facial.confidence * 100)}%
- **Indicators**: ${analysisData.signals.facial.indicators.join(', ')}
- **API Source**: ${analysisData.signals.facial.apiSource}

### Vocal Signals
- **Confidence**: ${Math.round(analysisData.signals.vocal.confidence * 100)}%
- **Indicators**: ${analysisData.signals.vocal.indicators.join(', ')}
- **API Source**: ${analysisData.signals.vocal.apiSource}

### Postural Signals
- **Confidence**: ${Math.round(analysisData.signals.postural.confidence * 100)}%
- **Indicators**: ${analysisData.signals.postural.indicators.join(', ')}
- **API Source**: ${analysisData.signals.postural.apiSource}

### Temporal Signals
- **Confidence**: ${Math.round(analysisData.signals.temporal.confidence * 100)}%
- **Indicators**: ${analysisData.signals.temporal.indicators.join(', ')}
- **API Source**: ${analysisData.signals.temporal.apiSource}

## Behavioral Alerts

${analysisData.alerts.map((alert: any) => `
### ${alert.type.toUpperCase()} - ${alert.severity.toUpperCase()}
- **Time**: ${alert.timestamp}
- **Description**: ${alert.description}
- **Confidence**: ${Math.round(alert.confidence * 100)}%
`).join('')}

## Timeline

${analysisData.timeline.map((event: any) => `
- **${event.time}**: ${event.event} (${Math.round(event.confidence * 100)}% confidence) - API: ${event.apiCall}
`).join('')}

${analysisData.claudeAnalysis ? `## Claude Analysis\n\n${analysisData.claudeAnalysis}` : ''}

---
*Generated by Blind Spot Analysis System*
`;
  }

  get connected(): boolean {
    return this.isInitialized && this.octokit !== null;
  }
}

export const githubService = new GitHubService();